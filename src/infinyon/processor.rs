use anyhow::Result;

use crate::sigma::components::rule::{sigma::SigmaRule, SiemRule};

/// This processor is in charge of processing the logs that are generated by the sigma rules.
/// This assume all data is in JSON format
pub struct SigmaJsonProcessor {
    rule: SigmaRule,
    siem_rule: SiemRule,
}

impl SigmaJsonProcessor {
    pub fn new(rule: SigmaRule) -> Self {
        Self {
            siem_rule: rule.clone().into(),
            rule,
        }
    }

    pub fn process(&self, log: &str) -> Result<bool> {
        let json = serde_json::from_str(log)?;

        self.process_json(&json)
    }

    fn process_json(&self, json: &serde_json::Value) -> Result<bool> {
        //let conditions = parse_condition(self.rule.detection.condition.as_ref())?;

        for (_sub_rule_name, sub_rule) in self.siem_rule.subrules.as_ref().iter() {
            for condition in &sub_rule.conditions {
                println!("{:?}", condition);
                if !condition.eval(json)? {
                    println!("condition");
                    return Ok(false);
                }
            }
        }

        println!("all condition passed");

        Ok(true)
    }
}

#[cfg(test)]
mod test {

    use serde_json::Value;

    use crate::sigma::components::rule::sigma::SigmaRule;

    const P1: &str = r#"{
        "dst_ip": "69.42.98.86",
        "src_ip": "89.185.234.145"
    }"#;

    const N1: &str = r#"{
        "other": "0.0.0.0"
    }"#;

    const N2: &str = r#"{
        "category": "firewall",
        "dst_ip": "69.42.98.80",
        "src_ip": "89.185.234.140"
    }"#;

    const C2RULE: &str = include_str!("../sigma/components/rule/c2_sigma_rule.yml");

    #[test]
    fn test_process_json() {
        let rule: SigmaRule = serde_yaml::from_str(&C2RULE).unwrap();
        let processor = super::SigmaJsonProcessor::new(rule);
        assert!(!processor.process(N1).expect("process"));
        assert!(processor.process(P1).expect("process"));
        assert!(!processor.process(N2).expect("process"));
    }

    #[test]
    fn test_log_json() {
        let json: Value = serde_json::from_str(N2).expect("json");
        assert_eq!(json.get("category").unwrap().as_str().unwrap(), "firewall");
    }
}
